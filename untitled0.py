# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_D0UL_coJTBVWQWjAGy4xSSqD7dC49Hv
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

# loading the diabetes dataset to a pandas Dataframe
diabetes_dataset=pd.read_csv('/content/diabetes.csv')

#printing first 5 rows of dataset
diabetes_dataset.head()

#number of rows and columns in this dataset
diabetes_dataset.shape

#Columns in the dataset
diabetes_dataset.columns

#getting statistical measures of the data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean()

#separating the data and labels
x = diabetes_dataset.drop(columns = 'Outcome', axis=1)
y = diabetes_dataset['Outcome']

diabetes_dataset.groupby('Outcome').mean()

print(x)

print(y)

scaler = StandardScaler()

scaler.fit(x)

standardized_data = scaler.transform(x)

print(standardized_data)

x = standardized_data
y = diabetes_dataset['Outcome']

print(x)
print(y)

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, stratify = y, random_state = 2)

print(x.shape, x_train.shape, x_test.shape)

classifier = svm.SVC(kernel='linear')

#Training the support vector machine classifier
classifier.fit(x_train, y_train)

x_train_prediction = classifier.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)

print("Accuracy score of training data : ", training_data_accuracy)

#accuracy score on the test data
x_test_prediction = classifier.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)

print("Accuracy score of test data : ", test_data_accuracy)

input_data = (5,166,72,19,175,25,8,0,587,1)

#changing input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)

if (prediction[0] == 0):
  print("The person is not diabetic")
else:
  print("The person is diabetic")

